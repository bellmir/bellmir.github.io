{"version":3,"file":"static/js/843.0d007e5d.chunk.js","mappings":"uOAoBA,MAjBA,SACEA,GAEC,IADDC,EACA,uDADS,WAAM,EAEfC,EAAAA,EAAAA,IAAiB,eAAgB,CAC/BC,QAAQ,CACNC,cAAc,UAAD,OAAYJ,MAG5BK,MAAK,SAAAC,GACJL,EAASK,EAAIC,KACd,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAI,2BAAQF,EACrB,GACF,ECGD,I,EAAA,EAlBA,SACET,EACAY,GAEC,IADDX,EACA,uDADS,WAAM,EAEfC,EAAAA,EAAAA,KAAkB,qBAAsBU,EAAS,CAC/CT,QAAQ,CACNC,cAAc,UAAD,OAAYJ,MAG5BK,MAAK,WACJJ,GACD,IACAO,OAAM,SAAAC,GACLC,QAAQC,IAAI,wCAAWF,EACxB,GACF,E,mBCJKI,EAAgBC,EAAAA,GAAAA,QAAH,qsDAyInB,MArEA,WACE,OAAwCC,EAAAA,EAAAA,IAAeC,EAAAA,EAAAA,GAAvD,eAAQhB,EAAR,KACMiB,GADN,MACiBC,EAAAA,EAAAA,IAAkBC,EAAAA,GAAAA,KACnC,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAQC,EAAR,KAAgBC,EAAhB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,IAAjD,eAAQG,EAAR,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MAiCjB,OA/BAC,EAAAA,EAAAA,YAAU,WACRC,EAAY5B,GAAa,SAACO,GACxBe,EAAUf,EACX,GACF,GAAE,KA4BD,UAACM,EAAD,CAAegB,UAAU,iBAAzB,WACE,oBAASA,UAAU,YAAnB,UACE,eAAIA,UAAU,UAAd,6DAEF,oBAASA,UAAU,mBAAnB,UACE,iBAAKA,UAAU,UAAf,WACE,gBAAKA,UAAU,UAAf,SAEIR,EAAOS,KAAI,SAACC,GAAS,IAAD,EAClB,OACE,iBAAKF,UAAW,aAEdG,QAAS,SAACC,IAzB5B,SAAsBA,EAAGF,GACvBE,EAAEC,cAAcC,UAAUC,OAAO,MACjC,IAAMC,EAAYd,EAAYe,QACxBC,EAAMhB,EAAYiB,WAAU,SAACC,GAAD,OAAUA,GAAQV,EAAMW,EAAxB,IAC/BH,GAAO,EACRF,EAAUM,OAAOJ,EAAK,GAEtBF,EAAUO,KAAKb,EAAMW,IAEvBlB,EAAea,EAChB,CAegCQ,CAAaZ,EAAGF,EAAO,EAFxC,WAIE,gBAAKe,IAAG,UAAEf,EAAMgB,gBAAR,QAAoBC,EAASC,IAAG,UAAKlB,EAAMmB,KAAX,oBACxC,wBAAKnB,EAAMmB,SAJNnB,EAAMW,GAOhB,OAGL,mBAAQb,UAAU,uBAChBG,QAAS,WA/CdT,EAAY4B,OAAS,EACtBlC,EAAS,6DAGXmC,EAAapD,EAAa,CACxBqD,YAAa9B,IACZ,WACDN,EAAS,wEACTQ,EAAS,IACV,GAsCoC,EAD/B,8CAOT,C","sources":["api/getTasteApi.js","api/postTasteApi.js","page/Account/ChooseTheme.jsx"],"sourcesContent":["// axios\r\nimport defaultAxios from './defaultAxios'\r\n\r\nfunction getTasteApi(\r\n  accessToken,\r\n  callback=()=>{}\r\n) {\r\n  defaultAxios.get('taste-themes', {\r\n    headers:{\r\n      authorization: `Bearer ${accessToken}`,\r\n    },\r\n  })\r\n  .then(res=>{\r\n    callback(res.data);\r\n  })\r\n  .catch(error=>{\r\n    console.log('취향선택', error);\r\n  })\r\n}\r\n\r\nexport default getTasteApi","// axios\r\nimport defaultAxios from './defaultAxios'\r\n\r\nfunction postTasteApi(\r\n  accessToken,\r\n  payload,\r\n  callback=()=>{}\r\n) {\r\n  defaultAxios.post('users/taste-themes', payload, {\r\n    headers:{\r\n      authorization: `Bearer ${accessToken}`,\r\n    },\r\n  })\r\n  .then(()=>{\r\n    callback();\r\n  })\r\n  .catch(error=>{\r\n    console.log('취향선택 전송', error);\r\n  })\r\n}\r\n\r\nexport default postTasteApi","// core\r\nimport { useState, useEffect } from 'react';\r\n// style\r\nimport styled from 'styled-components'\r\n// recoil\r\nimport { useRecoilState, useSetRecoilState } from 'recoil';\r\nimport { token, messageBundle } from 'store/index'\r\n// router\r\nimport { useNavigate } from 'react-router-dom';\r\n// api\r\nimport getTasteApi from 'api/getTasteApi'\r\nimport postTasteApi from 'api/postTasteApi'\r\n// img\r\nimport NoPhoto from 'assets/image/common/no_photo.png'\r\n\r\nconst PageContainer = styled.section`\r\n  .choose{\r\n    .options{\r\n      display: grid;\r\n      grid-template-columns: repeat(5, 1fr);\r\n      gap: 2.5rem;\r\n      max-height: 55rem;\r\n      padding-bottom: var(--space-small);\r\n      overflow-y: scroll;\r\n      @media screen and (max-width: 1000px) {\r\n        grid-template-columns: repeat(4, 1fr);\r\n        gap: 2rem;\r\n      }\r\n      @media screen and (max-width: 600px) {\r\n        grid-template-columns: repeat(3, 1fr);\r\n        gap: 1rem;\r\n      }\r\n      .option_box{\r\n        position: relative;\r\n        width: 100%;\r\n        aspect-ratio: 1;\r\n        border-radius: var(--border-radius-mid);\r\n        box-shadow: var(--box-shadow02);\r\n        overflow: hidden;\r\n        cursor: pointer;\r\n        &.on{\r\n          h3{\r\n            background-color: rgba(198, 128, 255, 0.7);\r\n          }\r\n        }\r\n        &:hover{\r\n          img{\r\n            transform: scale(1.05);\r\n          }\r\n        }\r\n        img{\r\n          width: 100%;\r\n          height: 100%;\r\n          object-fit: cover;\r\n          transition: var(--transition-default);\r\n        }\r\n        h3{\r\n          position: absolute;\r\n          top: 0;\r\n          width: 100%;\r\n          padding: 1em;\r\n          color: #fff;\r\n          font-size: var(--font-size-large);\r\n          font-weight: var(--font-w-bold);\r\n          background-color: rgba(0,0,0,0.5);\r\n          transition: var(--transition-default);\r\n          @media screen and (max-width: 600px) {\r\n            font-size: var(--font-size-mid);\r\n            padding: 0.6em 1em;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    .submit{\r\n      display: block;\r\n      height: 3.2em;\r\n      width: 100%;\r\n      max-width: 25rem;\r\n      margin: var(--space-small) auto 0;\r\n    }\r\n  }\r\n`\r\n\r\nfunction ChooseTheme() {\r\n  const [ accessToken, setAccessToken ] = useRecoilState(token.accessToken)\r\n  const setAlert = useSetRecoilState(messageBundle.alert)\r\n  const [ themes, setThemes ] = useState([])\r\n  const [ chosenTheme, setChosenTheme ] = useState([])\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(()=>{\r\n    getTasteApi(accessToken, (data)=>{\r\n      setThemes(data)\r\n    })\r\n  }, [])\r\n\r\n  function submitTaste(){\r\n    if(chosenTheme.length < 5) {\r\n      setAlert('최소 5개 선택해주세요');\r\n      return;\r\n    }\r\n    postTasteApi(accessToken, {\r\n      tasteThemes: chosenTheme\r\n    }, ()=>{\r\n      setAlert('테마 선택을 완료했습니다');\r\n      navigate('/');\r\n    });\r\n  }\r\n\r\n  function onThemeClick(e, theme){\r\n    e.currentTarget.classList.toggle('on');\r\n    const tempTheme = chosenTheme.slice();\r\n    const idx = chosenTheme.findIndex((chosen)=>chosen==theme.id)\r\n    if(idx >= 0){\r\n      tempTheme.splice(idx, 1);\r\n    } else{\r\n      tempTheme.push(theme.id)\r\n    }\r\n    setChosenTheme(tempTheme);\r\n  }\r\n\r\n  return (\r\n    <PageContainer className='c_main_section'>\r\n      <section className='c_section'>\r\n        <h2 className='c_title'>원하는 테마 선택</h2>\r\n      </section>\r\n      <section className=\"c_section choose\">\r\n        <div className=\"c_inner\">\r\n          <div className='options'>\r\n            {\r\n              themes.map((theme)=>{\r\n                return(\r\n                  <div className={'option_box'}\r\n                    key={theme.id}\r\n                    onClick={(e)=>{onThemeClick(e, theme)}}\r\n                  >\r\n                    <img src={theme.photoUrl ?? NoPhoto} alt={`${theme.name} 사진`} />\r\n                    <h3>{theme.name}</h3>\r\n                  </div>\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n          <button className='c_btn-primary submit'\r\n            onClick={()=> {submitTaste()}}\r\n          >선택 완료</button>\r\n        </div>\r\n      </section>\r\n    </PageContainer>\r\n  );\r\n}\r\n\r\nexport default ChooseTheme"],"names":["accessToken","callback","defaultAxios","headers","authorization","then","res","data","catch","error","console","log","payload","PageContainer","styled","useRecoilState","token","setAlert","useSetRecoilState","messageBundle","useState","themes","setThemes","chosenTheme","setChosenTheme","navigate","useNavigate","useEffect","getTasteApi","className","map","theme","onClick","e","currentTarget","classList","toggle","tempTheme","slice","idx","findIndex","chosen","id","splice","push","onThemeClick","src","photoUrl","NoPhoto","alt","name","length","postTasteApi","tasteThemes"],"sourceRoot":""}